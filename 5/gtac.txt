
#include <sa/user.h>
#include <base_utils/IFail.hxx>
#include <base_utils/TcResultStatus.hxx>

using namespace std;

int remove_all_mailbox_contents(char *user_id)
{
    int ifail = ITK_ok;
    ResultStatus rstat;
    try
    {
        tag_t user = NULLTAG;
        rstat = SA_find_user(user_id, &user);
        if (user == NULLTAG)
        {
            printf("\n   User %s NOT found! \n   Exiting program! \n", user_id);
            exit(0);
        }
        
        tag_t mailbox = NULLTAG;
        rstat = SA_ask_user_mailbox(user, &mailbox);

        if (mailbox != NULLTAG)
        {
            tag_t attr = NULLTAG;
            rstat = POM_attr_id_of_attr( "contents", "Folder", &attr);
            rstat = POM_refresh_instances_any_class(1, &mailbox, POM_modify_lock);
            rstat = POM_clear_attr(1, &mailbox, attr);
            
            logical unload = true; 
            rstat = POM_save_instances(1, &mailbox, unload);            
        }   
    }
    catch( const IFail &e )
    {
        cout << "error " << e.ifail() << endl;
        cout << e.getMessage() << endl; 
    }
    return ifail;
}

//////////////////

#include <iostream>
#include <epm/epm.h>
#include <epm/epm_task_template_itk.h>
#include <epm/signoff.h>
#include <tc/emh.h>
#include <tcinit/tcinit.h>
#include <tc/tc_startup.h>
#include <sa/group.h>
#include <sa/role.h>

int create_resource_pool_adhoc_signoff(EPM_action_message_t msg)
{
    int ifail = ITK_ok;
    ResultStatus stat;

    try
    {
        tag_t tRootTask = NULLTAG;
        stat = EPM_ask_root_task(msg.task, &tRootTask);

        tag_t tTask = msg.task;

        if (msg.action == EPM_start_action  && msg.proposed_state == EPM_started)
        {
            tag_t tGroup = NULLTAG;
            stat = SA_find_group("dba", &tGroup);

            tag_t tRole = NULLTAG;
            stat = SA_find_role2("DBA", &tRole);

            tag_t tPool = NULLTAG;
            stat = EPM_get_resource_pool(tGroup, tRole, FALSE, &tPool);

            int n = 0;
            scoped_smptr<tag_t> tSignoffs;
            stat = EPM_create_adhoc_signoff(tTask, tPool, &n, &tSignoffs);

            stat = EPM_set_adhoc_signoff_selection_done(tTask, TRUE);
        }
    }
    catch(IFail & ex)
    {
        return ex.ifail();
    }
    return ifail;
}

//////////////////

#include <iostream>
#include <epm/epm.h>
#include <tc/emh.h>
#include <tc/tc.h>
#include <tc/tc_startup.h>
#include <sa/user.h>
#include <tccore/aom.h>
#include <tccore/aom_prop.h>

#include <metaframework/BusinessObjectRef.hxx>
#include <base_utils/IFail.hxx>
#include <base_utils/TcResultStatus.hxx>
#include <base_utils/ScopedSmPtr.hxx>
#include <mld/logging/TcMainLogger.hxx>

using namespace std;
using namespace Teamcenter;
using Teamcenter::Main::logger;

int remove_all_reviewers(tag_t selectSignoffTaskTag)
{
    int ifail = ITK_ok;
    ResultStatus stat;
    try
    {
        int nReviewersTags = 0;
        scoped_smptr<tag_t> spReviewersTags;    
        stat = EPM_ask_attachments(selectSignoffTaskTag, EPM_signoff_attachment, &nReviewersTags, &spReviewersTags);
        cout << endl << "Before Number of Reviewers: " << nReviewersTags << endl;
        for (int ii = 0; ii < nReviewersTags; ii++)
        {       
            int nValues = 0;
            scoped_smptr<char*> spValues;
            stat = AOM_ask_displayable_values(spReviewersTags[ii], "group_member", &nValues, &spValues);
            for( int jj = 0 ; jj < nValues; jj++ )
                cout << "    " <<  spValues.get()[jj] << endl;
        }
        
        stat = EPM_remove_attachments(selectSignoffTaskTag, nReviewersTags, spReviewersTags.get() );
        
        stat = EPM_ask_attachments(selectSignoffTaskTag, EPM_signoff_attachment, &nReviewersTags, &spReviewersTags);
        cout << endl << "After Number of Reviewers: " << nReviewersTags << endl;
        for (int ii = 0; ii < nReviewersTags; ii++)
        {
            int nValues = 0;
            scoped_smptr<char*> spValues;
            stat = AOM_ask_displayable_values(spReviewersTags[ii], "group_member", &nValues, &spValues);
            for( int jj = 0 ; jj < nValues; jj++ )
                cout << "    " <<  spValues.get()[jj] << endl;
        }       
    }
    catch( const IFail &e )
    {
        ifail = e.ifail();
        cout << "\n    error " << ifail << endl;
        cout << "    "<< e.getMessage() <<endl;
    }
    return ifail;
}

/////////////

a
/*HEAD ACTION_HANDLER_TO_ASSIGN_RESOURCE_POOL_AS_REVIEWER CCC ITK */
/*
    Instructions:
        Save this file as GTAC_register_action_handler_callbacks.c
        The naming format is very important.
            GTAC_register_action_handler_callbacks.c
            GTAC_register_callbacks() - function name
            GTAC - the name of the executable

        Compile
            %TC_ROOT%\sample\compile -DIPLIB=none
                 GTAC_register_action_handler_callbacks.c
        Link
            %TC_ROOT%\sample\link_custom_exits GTAC
        Move File
            copy GTAC.dll %TC_USER_LIB%

        Set the following multi valued string Site Preference
        TC_customization_libraries=
        GTAC

    Handler Placement:
        "Assign" Task Action on the select-signoff-team of an Review Task
*/
#include <ict/ict_userservice.h>
#include <tccore/custom.h>
#include <itk/mem.h>
#include <tc/tc.h>
#include <user_exits/user_exits.h>
#include <tc/emh.h>
#include <epm/epm.h>
#include <sa/sa.h>
#include <stdarg.h>

static void ECHO(char *format, ...)
{
    char msg[1000];
    va_list args;
    va_start(args, format);
    vsprintf(msg, format, args);
    va_end(args);
    printf(msg);
    TC_write_syslog(msg);
}

#define IFERR_REPORT(X) (report_error( __FILE__, __LINE__, #X, X, FALSE))
#define ERROR_CHECK(X) if (IFERR_REPORT(X)) return (X)

static int report_error(char *file, int line, char *call, int status,
    logical exit_on_error)
{
    if (status != ITK_ok)
    {
        int
            n_errors = 0,
            *severities = NULL,
            *statuses = NULL;
        char
            **messages;

        EMH_ask_errors(&n_errors, &severities, &statuses, &messages);
        if (n_errors > 0)
        {
            ECHO("\n%s\n", messages[n_errors-1]);
            EMH_clear_errors();
        }
        else
        {
            char *error_message_string;
            EMH_get_error_string (NULLTAG, status, &error_message_string);
            ECHO("\n%s\n", error_message_string);
        }

        ECHO("error %d at line %d in %s\n", status, line, file);
        ECHO("%s\n", call);

        if (exit_on_error)
        {
            ECHO("Exiting program!\n");
            exit (status);
        }
    }

    return status;
}

extern DLLAPI int GTAC_action_handler(EPM_action_message_t message)
{
    int
        count,
        n_attachments = 0;
    tag_t
        *attachments = NULL,
        group = NULLTAG,
        job = NULLTAG,
        resourcePool = NULLTAG,
        role = NULLTAG,
        root_task = NULLTAG,
        signoff = NULLTAG,
        *unassigned_profiles = NULL;

    ECHO("GTAC_action_handler\n");

    ERROR_CHECK(EPM_ask_root_task( message.task, &root_task));
    ECHO("  root_task = %d\n", root_task);

    ERROR_CHECK(EPM_ask_attachments(root_task, EPM_target_attachment,
        &n_attachments, &attachments));
    if (n_attachments == 0) return 1;  // fail

    ERROR_CHECK(AOM_ask_group(attachments[0], &group));
    ECHO("  group = %d\n", group);

    if (attachments) MEM_free(attachments);

    ERROR_CHECK(SA_ask_group_default_role(group, &role) );
    ECHO("  role = %d\n", role);

    ERROR_CHECK(EPM_get_resource_pool(group, role, FALSE, &resourcePool));
    ECHO("  resourcePool = %d\n", resourcePool);

    ERROR_CHECK(EPM_ask_job(message.task, &job));
    ECHO("  job = %d\n", job);

    ERROR_CHECK(EPM_ask_unassigned_profiles(job, message.task, &count,
        &unassigned_profiles));
    ECHO("  count = %d\n", count);
    if (count == 0) return 1;  // fail

    ERROR_CHECK(EPM_create_profile_signoff(message.task, resourcePool,
        unassigned_profiles[0], &signoff));
    ECHO("  signoff = %d\n", signoff);

    if (unassigned_profiles) MEM_free(unassigned_profiles);

    ECHO("  Done returning ITK_ok\n");

    return ITK_ok;
}

extern DLLAPI int GTAC_register_action_handler(int *decision, va_list args)
{
    *decision = ALL_CUSTOMIZATIONS;

    ECHO("GTAC_register_action_handler\n");

    ERROR_CHECK(EPM_register_action_handler("GTAC-action-handler",
        "Placement: Assign Task Action of select-signoff-team task",
        GTAC_action_handler));

    return ITK_ok;
}

extern DLLAPI int GTAC_register_callbacks ()
{
    ECHO("GTAC_register_callbacks\n");

    ERROR_CHECK(CUSTOM_register_exit ( "GTAC", "USER_gs_shell_init_module",
       (CUSTOM_EXIT_ftn_t) GTAC_register_action_handler ));

    return ITK_ok;
}

////////////


#include <gtac.hxx>
#include <iostream>
#include <tc/emh.h>
#include <tc/tc.h>
#include <tc/tc_startup.h>

#include <metaframework/BusinessObjectRef.hxx>
#include <base_utils/IFail.hxx>
#include <base_utils/TcResultStatus.hxx>
#include <base_utils/ScopedSmPtr.hxx>
#include <mld/logging/TcMainLogger.hxx>

using namespace std;
using namespace Teamcenter;
using Teamcenter::Main::logger;

int ITK_user_main(int argc, char* argv[])
{
    int ifail = ITK_ok;
    ResultStatus stat;
    stat = ITK_initialize_text_services(ITK_BATCH_TEXT_MODE);         
    stat = ITK_auto_login();                                          
    stat = ITK_set_journalling(TRUE);   
    try
    {
        tag_t tRev = NULLTAG;
        stat = ITEM_find_rev("10093399", "A", &tRev);
        
        tag_t tWindow = NULLTAG;
        stat = BOM_create_window (&tWindow);
        
        tag_t tLine = NULLTAG; // Top Line
        stat = BOM_set_window_top_line(tWindow, NULLTAG, tRev, NULLTAG, &tLine);
    
        int iLines = 0;
        tag_t* ptLines = NULL;
        stat = BOM_line_ask_child_lines(tLine, &iLines, &ptLines);
        tLine = ptLines[0]; // Configure first child line       
        if(ptLines) MEM_free(ptLines);

        tag_t tOpt = NULLTAG;
        tag_t tOptRev = NULLTAG;
        tag_t tExp = NULLTAG;
        tag_t tExpBlk = NULLTAG;
        stat = BOM_new_option(tRev, "Color", "", BOM_option_mode_enum, &tOpt, &tOptRev, &tExp, &tExpBlk);

        int iIndex = 0;
        stat = BOM_add_option_rev_value(tOptRev, "Red", &iIndex);
        stat = BOM_add_option_rev_value(tOptRev, "Blue", &iIndex);
        stat = BOM_add_option_rev_value(tOptRev, "Green", &iIndex);
    
        tag_t tList = NULLTAG;
        stat = BOM_variant_new_clause_list (tWindow , &tList);
        stat = BOM_variant_clause_append (tList, BOM_variant_operator_or, tOpt, BOM_variant_operator_is_equal, "Green");
      
        tag_t tCondition = NULLTAG;
        stat = BOM_variant_join_clause_list (tList , &tCondition);

        tag_t tLoadIfCondition = NULLTAG;
        stat = BOM_variant_expr_load_if(tCondition, &tLoadIfCondition);
        stat = BOM_variant_delete_clause_list(tList);
        stat = AOM_save(tLoadIfCondition);

        tag_t tExpBlock = NULLTAG;
        stat = BOM_new_variant_e_block(&tExpBlock);
        stat = BOM_variant_e_block_add(tExpBlock, tLoadIfCondition);
        stat = BOM_line_set_variant_e_block(tLine, tExpBlock);
        
        stat = AOM_save (tLoadIfCondition);
        stat = AOM_save (tExpBlock);                
        stat = AOM_save(tOptRev);
        stat = AOM_save(tOpt);
        stat = AOM_save(tExp);
        stat = AOM_save(tExpBlk);
        stat = BOM_save_window(tWindow);
        stat = BOM_close_window(tWindow);
    }
    catch( const IFail &ex )
    {
        logger()->error( ex.ifail(), ex.getMessage());
        cout << ex.getMessage()  << endl;
        cout << "error " << ex.ifail() << endl;        
    }

    stat = ITK_exit_module(FALSE);                                        
    return ifail;
}

////////////


#include <iostream>
#include <me/me.h>
#include <sa/user.h>
#include <sa/group.h>
#include <sa/role.h>
#include <sa/groupmember.h>
#include <tc/emh.h>
#include <tc/tc.h>
#include <tc/tc_startup.h>
#include <tccore/aom.h>
#include <tccore/aom_prop.h>
#include <base_utils/IFail.hxx>
#include <base_utils/TcResultStatus.hxx>
#include <mld/logging/TcMainLogger.hxx>

using namespace std;
using namespace Teamcenter;
using Teamcenter::Main::logger;

int ITK_user_main(int argc, char* argv[])
{
    int ifail = ITK_ok;
    ResultStatus stat;
    try
    {
        stat = ITK_initialize_text_services(ITK_BATCH_TEXT_MODE);         
        stat = ITK_auto_login();                                          
        stat = ITK_set_journalling(TRUE);
        
        stat = SA_init_module(); 
        
        tag_t  dba_tag = NULLTAG;
        stat = SA_find_group("dba", &dba_tag);
        
        tag_t infodba_tag = NULLTAG;
        stat = SA_find_user("infodba", &infodba_tag); 
        
        tag_t user_tag = NULLTAG;
        stat = SA_find_user("jdoe", &user_tag); 
        if (user_tag != NULLTAG)
        {
            stat = AOM_lock_for_delete(user_tag);
            stat = SA_delete_user(user_tag, infodba_tag, dba_tag, FALSE);
        }
        else cout << endl << "User jdoe not found!"  << endl;

        tag_t person_tag = NULLTAG;
        stat = SA_find_person("Doe, John", &person_tag);
        if (user_tag != NULLTAG)
        {        
            stat = AOM_lock_for_delete(person_tag);
            stat = AOM_delete(person_tag);
        }
        else cout << endl << "Person Doe, John not found!"  << endl;
    }
    catch( const IFail &ex )
    {
        logger()->error( ex.ifail(), ex.getMessage());
        cout << ex.getMessage()  << endl;
        cout << "error " << ex.ifail() << endl;        
    }
    
    const char* syslog_path;
    syslog_path = EMH_ask_system_log();
    cout << endl << endl;
    cout << syslog_path << endl; 
    
    stat = ITK_exit_module(FALSE);                                        
    return ITK_ok;
}

/////////////

Действительно  решение   в 

EPM_trigger_action 
(нашёл у  сименсов в БЗ)

 

Create the sub-process using EPM_create_process_deferred_start 
Attach the created sub-process to parent process using EPM_attach_sub_processes( parentProcessTag, 1, &subProcessTag ); 
Add the task dependency using EPM_add_attachments( parentTask, 1, &dependentSubProcTask, &attachmentTypes ); where int attachmentTypes = EPM_interprocess_task_attachment. 
Start the sub-process using EPM_trigger_action( rootSubProcTaskTag, EPM_complete_action, "Sample comment" )

////////////////


					ITK_CALLER(AOM_ask_value_date(tSubTasks[idx], "fnd0StartDate", &d_startDate));
					ITK_CALLER(DATE_date_to_string ( d_startDate, "%Y.%m.%d %H:%M.%S", &converted_Date ));

////////////////

void loadTaskTypes(const char* epmTaskType)
{
	tag_t taskTypeObject = NULLTAG;
	
	ITK_CALLER(TCTYPE_find_type(epmTaskType, "EPMTask", &taskTypeObject));
	if (taskTypeObject != NULLTAG)
	{
		n_totalTasksAsAutoStuck++;
		custVectorArray_append(&badTaskStartArray, taskTypeObject);
	}
}

////////////////


int result = ITK_ok
result = AOM_ask_value_logical( myTag, "attributeName", &attributeValue);
if (ITK_ok != result)
{
    // DO SOMETHING
}

////////////

